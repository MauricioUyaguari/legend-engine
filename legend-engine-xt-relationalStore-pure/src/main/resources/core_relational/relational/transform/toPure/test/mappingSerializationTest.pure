// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::serialization::grammar::test::*;
import meta::pure::mapping::serialization::grammar::*;

function <<meta::pure::profiles::test.Test>> meta::pure::mapping::serialization::grammar::test::testPrintMapping():Boolean[1]
{
   assertEquals('Mapping meta::pure::mapping::serialization::grammar::test::TestMapping\n' +
                '(\n' +
                '   include meta::pure::mapping::serialization::grammar::test::Include\n' +
                '\n' +
                '   *meta::pure::mapping::serialization::grammar::test::MyClass : Pure\n' +
                '   {\n' +
                '     ~src meta::pure::mapping::serialization::grammar::test::OtherClass\n' +
                '     property : \'ok\' + \'ok\',\n' +
                '     other : $src.other,\n' +
                '     parentClassName : $src.parentClass.name,\n'+
                '     lastParentClassName : $src.parentClass->map({p|$p.parentClass.name})->last()\n'+
                '   }\n' +
                '\n' +
                '   *meta::pure::mapping::serialization::grammar::test::OtherClass[o1] : Pure\n' +
                '   {\n' +
                '     ~src meta::pure::mapping::serialization::grammar::test::MyClass\n' +
                '     other : $src.other,\n' +
                '     en : EnumerationMapping id : $src.other\n' +
                '   }\n' +
                '\n' +
                '   meta::pure::mapping::serialization::grammar::test::OtherClass[o2] : Pure\n' +
                '   {\n' +
                '     other : 22\n' +
                '   }\n' +
                '\n' +
                '   meta::pure::mapping::serialization::grammar::test::OtherClass[o3] : Pure\n' +
                '   {\n' +
                '     ~src meta::pure::mapping::serialization::grammar::test::MyClass\n' +
                '     other : $src.other,\n' +
                '     en : EnumerationMapping id2 : $src.property\n' +
                '   }\n' +
                '\n' +
                '   meta::pure::mapping::serialization::grammar::test::OtherClass[union] : Operation\n'+
                '   {\n'+
                '     meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(o2, o3)\n'+
                '   }\n'+
                '\n' +
                '   meta::pure::mapping::serialization::grammar::test::MyEnum : EnumerationMapping id\n' +
                '   {\n' +
                '     ok : [1]\n' +
                '   }\n' +
                '\n' +
                '   meta::pure::mapping::serialization::grammar::test::MyEnum : EnumerationMapping id2\n' +
                '   {\n' +
                '     ok : [\'1\']\n' +
                '   }\n' +
                ')\n',
                TestMapping->printMapping());
}

function <<meta::pure::profiles::test.Test>> meta::pure::mapping::serialization::grammar::test::testPrintMapping2():Boolean[1]
{
   assertEquals('Mapping meta::relational::tests::mapping::embedded::model::mapping::testMappingEmbedded\n' +
      '(\n' +
      '   *meta::relational::tests::model::simple::Person : Relational\n' +
      '   {\n' +
      '     firstName : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.PERSON_FIRSTNAME,\n' +
      '     lastName : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.PERSON_LASTNAME,\n' +
      '     firm\n' +
      '     (\n' +
      '        legalName : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.FIRM_LEGALNAME,\n' +
      '        address\n' +
      '        (\n' +
      '           name : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.FIRM_ADDRESS_NAME,\n' +
      '           type : EnumerationMapping GE : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.FIRM_ADDRESS_TYPE\n' +
      '        ),\n' +
      '        employees[meta_relational_tests_model_simple_Person] : [meta::relational::tests::mapping::embedded::model::store::myDB]@firmEmployees\n' +
      '     ),\n' +
      '     address\n' +
      '     (\n' +
      '        name : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.PERSON_ADDRESS_NAME,\n' +
      '        type : EnumerationMapping GE : [meta::relational::tests::mapping::embedded::model::store::myDB]PERSON_FIRM_DENORM.PERSON_ADDRESS_TYPE\n' +
      '     )\n' +
      '   }\n' +
      '\n' +
      '   meta::relational::tests::model::simple::GeographicEntityType : EnumerationMapping GE\n' +
      '   {\n' +
      '     CITY : [1],\n' +
      '     REGION : [2]\n' +
      '   }\n' +
      ')\n', meta::relational::tests::mapping::embedded::model::mapping::testMappingEmbedded->printMapping());
}

Class meta::pure::mapping::serialization::grammar::test::MyClass
{
   property : String[1];
   other : Integer[1];
   parentClassName:String[*];
   lastParentClassName:String[0..1];

}


Class meta::pure::mapping::serialization::grammar::test::OtherClass
{
   other : Integer[1];
   en : MyEnum[1];
   parentClass : OtherClass[*];
   name:String[0..1];

}

Enum meta::pure::mapping::serialization::grammar::test::MyEnum
{
   ok, ok2
}

###Mapping
import meta::pure::mapping::serialization::grammar::test::*;

Mapping meta::pure::mapping::serialization::grammar::test::Include
(
)

Mapping meta::pure::mapping::serialization::grammar::test::TestMapping
(
   include meta::pure::mapping::serialization::grammar::test::Include

   MyClass : Pure
             {
                ~src OtherClass
                property : 'ok' + 'ok',
                other : $src.other,
                parentClassName : $src.parentClass.name,
                lastParentClassName : $src.parentClass->map({p|$p.parentClass.name})->last()

             }

   *OtherClass[o1] : Pure
             {
                ~src MyClass
                other : $src.other,
                en : EnumerationMapping id : $src.other
             }

   OtherClass[o2] : Pure
             {
                other : 22
             }

   OtherClass[o3] : Pure
             {
                ~src MyClass
                other : $src.other,
                en : EnumerationMapping id2 : $src.property
             }

   OtherClass[union] : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(o2, o3)
   }


   meta::pure::mapping::serialization::grammar::test::MyEnum: EnumerationMapping id
   {
      ok : 1
   }

   meta::pure::mapping::serialization::grammar::test::MyEnum: EnumerationMapping id2
   {
      ok : '1'
   }
)